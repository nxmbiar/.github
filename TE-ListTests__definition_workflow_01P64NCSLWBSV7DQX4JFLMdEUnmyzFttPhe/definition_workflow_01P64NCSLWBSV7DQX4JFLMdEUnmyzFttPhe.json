{
  "workflow": {
    "unique_name": "definition_workflow_01P64NCSLWBSV7DQX4JFLMdEUnmyzFttPhe",
    "name": "TE - List Tests",
    "title": "TE - List Tests",
    "type": "generic.workflow",
    "base_type": "workflow",
    "variables": [
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "output",
          "name": "Output",
          "type": "datatype.string",
          "is_required": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01P64NCSFQKH456LRxSmppoGhb8VuO0qS8K",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "",
          "scope": "input",
          "name": "Filter Criteria",
          "type": "datatype.string",
          "description": "Filter by field values, for example: type == \"agent-to-server\" will return only agent-to-server tests. Logical AND/OR operators are also supported. By default or if you leave this field blank, all rows are returned.",
          "is_required": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01P64NCSFQGCU3F3Tq1Rb6ANvC6HZV6ArSL",
        "object_type": "variable_workflow"
      },
      {
        "schema_id": "datatype.string",
        "properties": {
          "value": "'testId', 'testName', 'createdDate', 'modifiedDate', 'createdBy', 'modifiedBy', 'enabled', 'savedEvent', 'type', 'interval', 'server', 'protocol', 'ipv6policy', 'networkMeasurements', 'mtuMeasurements', 'bandwidthMeasurements', 'bgpMeasurements', 'usePublicBgp', 'dscpId', 'alertsEnabled', 'liveShare', 'pingPayloadSize', 'probeMode', 'pathTraceMode', 'numPathTraces', 'dscp'",
          "scope": "input",
          "name": "Fields To Return",
          "type": "datatype.string",
          "description": "Single quoted, comma-separated list of fields to return. By default, the following are available \u0026 supported, i.e. you may choose to output one or more of these: \n\n'testId', 'testName', 'createdDate', 'modifiedDate', 'createdBy', 'modifiedBy', 'enabled', 'savedEvent', 'type', 'interval', 'server', 'protocol', 'ipv6policy', 'networkMeasurements', 'mtuMeasurements', 'bandwidthMeasurements', 'bgpMeasurements', 'usePublicBgp', 'dscpId', 'alertsEnabled', 'liveShare', 'pingPayloadSize', 'probeMode', 'pathTraceMode', 'numPathTraces', 'dscp'",
          "is_required": false,
          "is_invisible": false
        },
        "unique_name": "variable_workflow_01P6BTF2DIIDQ6WuzDyxTPN5mEIIL33NavQ",
        "object_type": "variable_workflow"
      }
    ],
    "properties": {
      "atomic": {
        "atomic_group": "ThousandEyes",
        "is_atomic": true
      },
      "delete_workflow_instance": false,
      "description": "Retrieve \u0026 Filter configured tests available in your ThousandEyes account. \nDocumentation: https://developer.thousandeyes.com/v6/tests/#/test_list\n\nSteps to use:\n1. Setup your ThousandEyes API Target \u0026 Account Key\n2. Provide a filter criteria/condition \u0026 what fields you'd like to have returned (this step is optional - by default, all fields/values are returned)\n3. If the request is successful, the output of this atomic is a JSON string w/ rows that match the filter criteria\n4. If the request is not successful, the output contains the error message",
      "display_name": "TE - List Tests",
      "runtime_user": {
        "target_default": true
      },
      "target": {
        "target_type": "web-service.endpoint",
        "target_id": "definition_target_01P3MWIYQ3A8A1rJ3FHbF78zUjm8DoD9pjF",
        "execute_on_workflow_target": true
      }
    },
    "object_type": "definition_workflow",
    "actions": [
      {
        "unique_name": "definition_activity_01P64PZPMBZ692uBBBIhrDDcxA1I52hflpN",
        "name": "Swagger HTTP Request",
        "title": "Get Tests List",
        "type": "web-service.swagger_http_request",
        "base_type": "activity",
        "properties": {
          "action_timeout": 180,
          "content_type": "application/json",
          "continue_on_error_status_code": false,
          "continue_on_failure": true,
          "display_name": "Get Tests List",
          "error": "null",
          "method": "GET",
          "relative_url": "/tests.json",
          "runtime_user": {
            "target_default": true
          },
          "skip_execution": false,
          "swagger_url": "https://raw.githubusercontent.com/ciscomanagedservices/sxo-thousandeyes/main/Cisco%20ThousandEyes%20API%20v6.json?token=AB3MRM75BNVET2HXMEAX3T3AY3UKE",
          "target": {
            "use_workflow_target": true
          }
        },
        "object_type": "definition_activity"
      },
      {
        "unique_name": "definition_activity_01P64ND5I874B1DerEWxvbfeywUFBhaKLCv",
        "name": "Condition Block",
        "title": "Check if Successful",
        "type": "logic.if_else",
        "base_type": "activity",
        "properties": {
          "continue_on_failure": false,
          "display_name": "Check if Successful",
          "skip_execution": false
        },
        "object_type": "definition_activity",
        "blocks": [
          {
            "unique_name": "definition_activity_01P64ND9MTGCA0pwPu8GOcQEUTw0vcSwduh",
            "name": "Condition Branch",
            "title": "Succeeded",
            "type": "logic.condition_block",
            "base_type": "activity",
            "properties": {
              "condition": {
                "left_operand": "$activity.definition_activity_01P64PZPMBZ692uBBBIhrDDcxA1I52hflpN.output.succeeded$",
                "operator": "eq",
                "right_operand": true
              },
              "continue_on_failure": false,
              "display_name": "Succeeded",
              "skip_execution": false
            },
            "object_type": "definition_activity",
            "actions": [
              {
                "unique_name": "definition_activity_01P6725R9Q7YX26Imgl2lZjv0EjTBqX1sbw",
                "name": "Read Table from JSON",
                "title": "Parse JSON into Table",
                "type": "corejava.read_table_from_json",
                "base_type": "activity",
                "properties": {
                  "action_timeout": 180,
                  "continue_on_failure": false,
                  "display_name": "Parse JSON into Table",
                  "input_json": "$activity.definition_activity_01P64PZPMBZ692uBBBIhrDDcxA1I52hflpN.output.response_body$",
                  "jsonpath_query": "$.test[*][$workflow.definition_workflow_01P64NCSLWBSV7DQX4JFLMdEUnmyzFttPhe.input.variable_workflow_01P6BTF2DIIDQ6WuzDyxTPN5mEIIL33NavQ$]",
                  "persist_output": true,
                  "populate_columns": true,
                  "skip_execution": false
                },
                "object_type": "definition_activity"
              },
              {
                "unique_name": "definition_activity_01P6BNCN5WTJP0hEq4DTOprbFEUV7kSK0pE",
                "name": "Select from Table",
                "title": "Filter Table",
                "type": "core.selectfromtable",
                "base_type": "activity",
                "properties": {
                  "action_timeout": 180,
                  "continue_on_failure": false,
                  "display_name": "Filter Table",
                  "input_table": "$activity.definition_activity_01P6725R9Q7YX26Imgl2lZjv0EjTBqX1sbw.output.read_table_from_json$",
                  "number_of_rows": {
                    "all_rows": true
                  },
                  "persist_output": true,
                  "skip_execution": false,
                  "sorting": {
                    "no_sort": true
                  },
                  "where_clause": "$workflow.definition_workflow_01P64NCSLWBSV7DQX4JFLMdEUnmyzFttPhe.input.variable_workflow_01P64NCSFQGCU3F3Tq1Rb6ANvC6HZV6ArSL$"
                },
                "object_type": "definition_activity"
              },
              {
                "unique_name": "definition_activity_01P64NDGJ7FSO6kGaDWpbmC2DI2WQK3wZ29",
                "name": "Set Variables",
                "title": "Return Filtered JSON Output",
                "type": "core.set_multiple_variables",
                "base_type": "activity",
                "properties": {
                  "continue_on_failure": false,
                  "display_name": "Return Filtered JSON Output",
                  "skip_execution": false,
                  "variables_to_update": [
                    {
                      "variable_to_update": "$workflow.definition_workflow_01P64NCSLWBSV7DQX4JFLMdEUnmyzFttPhe.output.variable_workflow_01P64NCSFQKH456LRxSmppoGhb8VuO0qS8K$",
                      "variable_value_new": "$activity.definition_activity_01P6BNCN5WTJP0hEq4DTOprbFEUV7kSK0pE.output.response_body$"
                    }
                  ]
                },
                "object_type": "definition_activity"
              }
            ]
          },
          {
            "unique_name": "definition_activity_01P64NDQ113IA4qX4xrj8xcHMs7lBaASgw1",
            "name": "Condition Branch",
            "title": "Not Succeeded",
            "type": "logic.condition_block",
            "base_type": "activity",
            "properties": {
              "condition": {
                "left_operand": "$activity.definition_activity_01P64PZPMBZ692uBBBIhrDDcxA1I52hflpN.output.succeeded$",
                "operator": "eq",
                "right_operand": false
              },
              "continue_on_failure": false,
              "display_name": "Not Succeeded",
              "skip_execution": false
            },
            "object_type": "definition_activity",
            "actions": [
              {
                "unique_name": "definition_activity_01P64NDSDPE7D2h68OEnAxgpZWelGgT0BqL",
                "name": "Set Variables",
                "title": "Set Error Output",
                "type": "core.set_multiple_variables",
                "base_type": "activity",
                "properties": {
                  "continue_on_failure": false,
                  "display_name": "Set Error Output",
                  "skip_execution": false,
                  "variables_to_update": [
                    {
                      "variable_to_update": "$workflow.definition_workflow_01P64NCSLWBSV7DQX4JFLMdEUnmyzFttPhe.output.variable_workflow_01P64NCSFQKH456LRxSmppoGhb8VuO0qS8K$",
                      "variable_value_new": "$activity.definition_activity_01P64PZPMBZ692uBBBIhrDDcxA1I52hflpN.output.error.message$"
                    }
                  ]
                },
                "object_type": "definition_activity"
              }
            ]
          }
        ]
      }
    ],
    "categories": [
      "category_1BMfMXSnJMyt5Ihqi7rWJr5N8cf"
    ]
  },
  "targets": {
    "definition_target_01P3MWIYQ3A8A1rJ3FHbF78zUjm8DoD9pjF": {
      "unique_name": "definition_target_01P3MWIYQ3A8A1rJ3FHbF78zUjm8DoD9pjF",
      "name": "ThousandEyes",
      "title": "ThousandEyes",
      "type": "web-service.endpoint",
      "base_type": "target",
      "object_type": "definition_target",
      "properties": {
        "default_runtime_user_id": "definition_runtime_user_01P3MVJ30ETO74UGRmeHwWkfpjWv3ubfm5f",
        "disable_certificate_validation": false,
        "display_name": "ThousandEyes",
        "host": "api.thousandeyes.com",
        "ignore_proxy": false,
        "no_runtime_user": false,
        "path": "v6",
        "protocol": "https"
      }
    }
  },
  "runtime_users": {
    "definition_runtime_user_01P3MVJ30ETO74UGRmeHwWkfpjWv3ubfm5f": {
      "unique_name": "definition_runtime_user_01P3MVJ30ETO74UGRmeHwWkfpjWv3ubfm5f",
      "name": "amasarda-1keyes",
      "title": "amasarda-1keyes",
      "type": "runtime_user.web-service_basic_credentials",
      "base_type": "runtime_user",
      "object_type": "definition_runtime_user",
      "properties": {
        "auth_option": "*****",
        "basic_password": "*****",
        "basic_username": "*****",
        "display_name": "amasarda-1keyes"
      }
    }
  }
}